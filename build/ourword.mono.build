<project name="OurWord Build" default="build">

	<!-- ***************************************************************** -->
	<!-- ********* 			Set a few properties			   *********** -->
	<!-- ***************************************************************** -->
	<!-- Project build dir is the dir where the build script is located -->
	<property name="project.bld.dir"  value="${project::get-base-directory()}"/>
	
	<!-- Project base dir is the build dir's parent -->
	<property name="project.base.dir" value="${path::get-directory-name(project.bld.dir)}"/>
	
	<!-- Project source dir is a child of the base dir -->
	<property name="project.src.dir" value="${project.base.dir}" /> <!-- review should move source into a folder -->

	<!-- Project lib dir is a child of the base dir -->
	<property name="project.lib.base.dir" value="${path::combine(project.base.dir,'lib')}"/>

	<!-- OS Platform in Use -->
	<property name="os.platform" value="other"/>
	<if test="${platform::is-win32()}">
		<property name="os.platform" value="win32"/>
		<!-- Default runtime configuration -->
		<property name="runtime.config" value="net-2.0"/>
	</if>
	<if test="${platform::is-unix()}">
		<property name="os.platform" value="linux"/>
		<!-- Default runtime configuration -->
		<property name="runtime.config" value="mono-2.0"/>
	</if>

	<!-- Default build configuration -->
	<property name="build.config" value="Debug"/>
	<property name="build.defines" value=""/>

	<!-- List of buildfiles for the individual projects. Order is relevant!-->
	<fileset id="project.buildfiles.src" basedir="${project.src.dir}">
		<include name="JWTools/JWTools.proj.build" />
		<include name="JWdb/JWdb.proj.build" />			
		<include name="OurWord/OurWord.proj.build" />					
	</fileset>
	
	<target name="clean" description="Delete all previously compiled binaries.">
		<delete>
			<fileset>
				<include name="../**/bin/**" />
				<include name="../**/obj/**" />
				<include name="../output/**" />
				<include name="../release/output/*" />
				<exclude name="../.hg/**" />
				<exclude name="../lib/**" />
			</fileset>
		</delete>
	</target>
    
	<target name="revision_teamcityhg">
		<property name="teamcity" value="${environment::get-variable('BUILD_NUMBER')}" />
		<regex pattern="^(?'revision'[^:]*)" input="${teamcity}" />
		<property name="revision" value="${string::trim(revision)}" />
		<echo message="Revision: ${revision}" />
	</target>
	
	<target name="revision"> 
		<property name="revision" value="${environment::get-variable(BUILD_NUMBER)}"/>
	</target>
	
	<target name="version" depends="revision_teamcityhg">
		<loadfile property="version" file="version.txt">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<property name="version" value="${string::trim(version)}" />
		<echo message="Version: ${version}" />
	</target>

	<target name="assemblyinfo" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../**/AssemblyInfo.cs" />
				</items>
			</in>
			<do>
				<script language="C#">
				<code><![CDATA[
				public static void ScriptMain(Project project)
				{
					StreamReader reader = new StreamReader(project.Properties["filename"]);
					string contents = reader.ReadToEnd();
					reader.Close();
					string replacement;
					string newText = contents;
					replacement = string.Format(
						"[assembly: AssemblyVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyVersion\("".*""\)\]", replacement);
					replacement = string.Format(
						"[assembly: AssemblyFileVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyFileVersion\("".*""\)\]", replacement);
					StreamWriter writer = new StreamWriter(project.Properties["filename"], false);
					writer.Write(newText);
					writer.Close();
				}
				]]>
				</code>
				</script>
			</do>
		</foreach>
	</target>

	<target name="build" description="Build all targets." depends="clean">
		<call target="build-only"/>
	</target>

	<target name="rebuild">
		<call target="build-only"/>
	</target>

	<target name="build-only" depends="make-output-dir, set-build-config, set-runtime-config, copy-lib-files">
		<nant target="build">
			<properties>
				<property name="build.defines" value="${build.defines}" />
	        	<property name="build.debug" value="${build.debug}" />
				<property name="build.debug" value="${build.debug}" />
				<property name="project.lib.dir" value="${project.lib.dir}" />
				<property name="project.output.dir" value="${project.output.dir}" />
			</properties>    		
			<buildfiles refid="project.buildfiles.src" />
    	</nant>

        <property name="expected.output" value="${project.output.dir}/OurWord.exe"/>
        <fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
    </target>
    
	<target name="test" description="Build all targets." depends="build-only">
		<call target="test-only"/>
	</target>

     <target name="test-only">
<!-- Run tests the first time without stopping the build under on failing tests because we want to be able to see ALL failing tests in the log.
		The downside to this is that TeamCity will show a passing build even with failing tests-->
		
		<echo message="*********************************************************************"/>
		<echo message="******                  Begin Test run!	                    ********"/>
		<echo message="*********************************************************************"/>	

	<foreach item="File" property="filename">
	    <in>
			<items>
				<include name="${project.output.dir}/*.Tests.dll" />
       		</items>
	    </in>
	    <do>
		    <nunit2 failonerror="false" verbose="true">
    		<formatter type="Plain"/>
    		<test>
            <assemblies>
            	<include name="${filename}" />
            </assemblies>
            <categories>
				<exclude name="MouseSensitive"/>
				<exclude name="Windows IME"/>
            	<exclude name="Keyman6"/>
            	<exclude name="Keyman7"/>
          	</categories>
    		</test>    	
    	</nunit2>
	    </do>
		</foreach>

		<echo message="*********************************************************************"/>
		<echo message="******                  End Test run!                        ********"/>
		<echo message="*********************************************************************"/>

<!-- Run the tests a second time, failing as soon as possible. We do this so that TeamCity indicates a failed build on failing tests-->
		<nunit2 haltonfailure="true" failonerror="true">
    		<formatter type="Plain" usefile="false" />
    		<test>
            <assemblies>
            	<include name="${project.output.dir}/*.Tests.dll" />
            </assemblies>
            <categories>
				<exclude name="MouseSensitive"/>
				<exclude name="Windows IME"/>
            	<exclude name="Keyman6"/>
            	<exclude name="Keyman7"/>
          	</categories>
    		</test>    	
    	</nunit2>
    </target>

	<target name="dist" depends="assemblyinfo make-output-dir, set-build-config, set-runtime-config">
		<tar destfile="${project.output.dir}/wesay-src-${version}.tar.gz" compression="GZip">
			<fileset basedir="${project.base.dir}">
				<include name="./**/*.build" />
				<include name="./**/*.cs" />
				<include name="./**/*.resx" />
				<include name="./**/Resources/*" />
				<include name="./**/*.png" />
				<include name="./**/*.xsl" />
				<include name="./**/*.htm" />
				<include name="./**/*.bmp" />
				<include name="./**/*.ico" />
				<include name="lib/mono/**" />
				<include name="build/*" />
				<exclude name=".hg/**" />
			</fileset>
		</tar>
	</target>

	<target name="package_clean">
		<echo message="Deleting exising files from publish folder. Note: this folder is above the project.base.dir" />
        <delete>
            <fileset>
                <include name="${project.base.dir}/../ourword_*" />
			</fileset>
		</delete>
		<echo message="Reverting package changelog debian-src/changelog" />
		<exec program="hg" workingdir="${project.base.dir}">
			<arg line="revert debian-src/changelog" />
		</exec>
	</target>

	<target name="package" depends="dist package_clean">
		<exec program="build" basedir="${project.base.dir}/debian-src" workingdir="${project.base.dir}">
		</exec>
	</target>

	<target name="install" depends="set-build-config, set-runtime-config, set-output-dir">
		<property name="INSTALL_DIR" value="/" overwrite="false" />
		<property name="USR_SHARE" value="${path::combine(INSTALL_DIR, 'usr/share/ourword')}"/>
		<property name="USR_BIN" value="${path::combine(INSTALL_DIR, 'usr/bin')}"/>
		<copy todir="${USR_SHARE}">
			<fileset basedir="${project.output.dir}">
				<include name="*.dll" />
				<include name="*.exe" />
				<include name="*.config" />
				<exclude name="*Tests.dll" />
				<exclude name="*Test.dll" />
				<exclude name="*.mdb" />
			 </fileset>
		</copy>
		<copy todir="${path::combine(USR_SHARE, 'Loc')}">
			<fileset basedir="${project.src.dir}/OurWord/Loc">
				<include name="**" />
			 </fileset>
		</copy>
		<copy file="ourword.mono.runner" tofile="${USR_BIN}/ourword" />
	</target>
    

<!-- ***************************************************************** -->
<!-- ********* Targets for setting the build configuration *********** -->
<!-- ***************************************************************** -->

  <target name="set-build-config">
    <call target="set-${build.config}-build-config"/>
  </target>

  <target name="set-Debug-build-config">
	<echo message="Setting configuration to Debug."/>
    <property name="build.config" value="Debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines" value="DEBUG,TRACE,${runtime.defines}"
        dynamic="true"/>
    <property name="zip.build.suffix" value="-dbg"/>
    <property name="msi.build.suffix" value="-dbg"/>
  </target>
	
  <target name="set-release-build-config">
	<echo message="Setting configuration to Release."/>
    <property name="build.config" value="Release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines" value="TRACE,${runtime.defines}"
	dynamic="true"/>
    <property name="zip.build.suffix" value=""/>
    <property name="msi.build.suffix" value=""/>
  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for setting the runtime configuration          *** -->
<!-- ***************************************************************** -->

  <target name="set-runtime-config">   
    <call target="set-${runtime.config}-runtime-config"/>
  </target>
  
  <target name="set-default-dot-net-runtime-config">
    <fail unless="${property::exists( 'default.net.runtime' )}"
      message="No versions of the .NET SDK were found"/>

    <call target="set-${default.net.runtime}-runtime-config" />
  </target>

  <target name="set-default-mono-runtime-config">
    <fail unless="${property::exists( 'default.mono.runtime' )}"
      message="No versions of the Mono runtime were found"/>

    <call target="set-${default.mono.runtime}-runtime-config" />
  </target>

  <target name="set-net-1.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'net-1.0' )}"
      message="The .NET 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="net-1.0"/>
    <property name="runtime.defines" value="NET,NET_1_0"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.gui" value="false"/>
    <property name="build.x86" value="false"/>
    <property name="nant.settings.currentframework" 
      value="net-1.0"/>
    <property name="zip.runtime.suffix" value="-net-1.0"/>
    <property name="msi.runtime.suffix" value="-net-1.0"/>
    <property name="supported.test.platforms" 
      value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
  </target>
	
  <target name="set-net-1.1-runtime-config">
    <property name="runtime.platform" value="net"/>
    <fail unless="${framework::sdk-exists( 'net-1.1' )}"
      message="The .NET 1.1 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.1"/>
    <property name="runtime.config" value="net-1.1"/>
    <property name="runtime.defines" value="NET,NET_1_1"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="build.x86" value="false"/>
    <property name="nant.settings.currentframework" 
      value="net-1.1"/>
    <property name="zip.runtime.suffix" value="-net-1.1"/>
    <property name="msi.runtime.suffix" value="-net-1.1"/>
    <property name="supported.test.platforms"
      value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
  </target>
	
  <target name="set-net-2.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'net-2.0' )}"
      message="The .NET 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="net-2.0"/>
    <property name="runtime.defines" value="NET,NET_2_0"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="build.x86" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-2.0"/>
    <property name="zip.runtime.suffix" value="-net-2.0"/>
    <property name="msi.runtime.suffix" value="-net-2.0"/>
    <property name="supported.test.platforms" value="net-2.0,mono-2.0"/>
  </target>
	
  <target name="set-mono-1.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'mono-1.0' )}"
      message="The Mono 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="mono-1.0"/>
    <property name="runtime.defines" value="MONO,MONO_1_0"/>
    <property name="build.mono" value="true"/>
    <property name="build.win32" value="false"/>
    <property name="build.gui" value="true"/>
    <property name="build.x86" value="false"/>
    <property name="nant.settings.currentframework" 
      value="mono-1.0"/>
    <property name="zip.runtime.suffix" value="-mono-1.0"/>
    <property name="msi.runtime.suffix" value="-mono-1.0"/>
    <property name="supported.test.platforms"
      value="mono-1.0,mono-2.0,net-1.0,net-1.1,net-2.0"/>
  </target>

  <target name="set-mono-2.0-runtime-config">
    <fail unless="${framework::sdk-exists( 'mono-2.0' )}"
      message="The Mono 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="mono-2.0"/>
    <property name="runtime.defines" value="MONO,MONO_2_0"/>
    <property name="build.mono" value="true"/>
    <property name="build.win32" value="false"/>
    <property name="build.gui" value="true"/>
    <property name="build.x86" value="true"/>
    <property name="nant.settings.currentframework" value="mono-2.0"/>
    <property name="zip.runtime.suffix" value="-mono-2.0"/>
    <property name="msi.runtime.suffix" value="-mono-2.0"/>
    <property name="supported.test.platforms" value="mono-2.0,net-2.0"/>
  </target>

	<!-- ***************************************************************** -->
	<!-- ***    Targets for setting the output directory               *** -->
	<!-- ***************************************************************** -->
	<target name="set-output-dir" depends="set-build-config,set-runtime-config">
		<property name="base.output.dir"
			value="${path::combine(project.base.dir,'output')}"/>
		<property name="os.platform.dir"
			value="${path::combine(base.output.dir,os.platform)}"/>
		<property name="runtime.platform.dir"
			value="${path::combine(os.platform.dir,runtime.platform)}"/>
		<property name="runtime.version.dir"
			value="${path::combine(runtime.platform.dir,runtime.version)}"/>
		<property name="project.output.dir" 
			value="${path::combine(runtime.version.dir,build.config)}"/>
		<property name="project.documentation.dir" 
			value="${path::combine(project.output.dir,'doc')}"/>
		<property name="project.resource.dir" 
			value="${path::combine(project.output.dir,'resources')}"/>
	</target>
  
	<target name="make-output-dir" depends="set-output-dir">
		<mkdir dir="${project.output.dir}" unless="${directory::exists(project.output.dir)}"/>
		<mkdir dir="${project.documentation.dir}" unless="${directory::exists(project.documentation.dir)}"/>
	</target>

	<!-- ***************************************************************** -->
	<!-- ***    Targets for copying lib files to output directory      *** -->
	<!-- ***************************************************************** -->

	<target name="copy-lib-files" depends="make-output-dir, set-runtime-config">
		<call target="copy-${runtime.platform}-lib-files"/>
	</target>

	<target name="copy-mono-lib-files" depends="make-output-dir, set-build-config, set-runtime-config">
		<property name="project.lib.dir" value="${path::combine(project.lib.base.dir,runtime.platform)}"/>
		<echo message="${project.lib.dir}" />
		<copy todir="${project.output.dir}">
			<fileset basedir="${project.lib.dir}">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>

	<target name="copy-net-lib-files" depends="make-output-dir, set-build-config, set-runtime-config">
		<!-- review: This needs work, it's copying from the wrong folder. We should restructure the lib folder to support multiple platforms better and keep the win / mono libs separate CJP -->
		<property name="project.lib.dir" value="${path::combine(project.lib.base.dir,runtime.platform)}"/>
		<echo message="${project.lib.dir}" />
		<copy todir="${project.output.dir}">
			<fileset basedir="${project.lib.dir}">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>

	<target name="copy-windows-lib-files" depends="make-output-dir, set-build-config, set-runtime-config">
		<property name="project.lib.dir" value="$project.lib.base.dir"/>	
		<copy todir="${project.output.dir}">
			<fileset basedir="${project.lib.dir}">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>
	
</project>
